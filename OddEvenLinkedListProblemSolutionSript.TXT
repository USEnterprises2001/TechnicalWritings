ODD EVEN LINKED LIST - PROBLEM AND SOLUTION SCRIPT

For Video : https://www.youtube.com/watch?v=9Sz73igoitg

[VideoBumper.1.3.MP4]

* TITLE CARD *

[Title.PNG]
[Title.1.MP3]

Welcome LeetCoders.

It's your boy, Diego.

Today, we are going to be solving the problem known as the

Odd Even Linked List Problem.

Remember, you can pause or rewind this video at any time if you would like to take a closer look at what is going on.

...
... = Audio Breaks
...

[ProblemDescription.PNG]
[ProblemDescription.MP3] 

* PROBLEM DESCRIPTION *

...
...
...

[ProblemDescription.1.PNG] 
[ProblemDescription.1.MP3] CREATE

This problem has a challenge level of MEDIUM.

OK, Let's take a look at the problem description :

Given the HEAD of a singly linked list, 

group all the nodes with ODD indices together 

followed by the nodes with EVEN indices, 

and return THE REORDERED LIST.

So, The FIRST node is considered ODD,

and the SECOND node is EVEN, and so on.

Note that the relative order

inside both the even and odd groups 

should remain as it was in the input.

You must solve the problem in "Order of One" (O(1)) extra space complexity 

and "Order of n" (O(n)) time complexity.

...
...
...

[Pitfall.PNG]
[Pitfall.MP3]

...
...
...

[Pitfall.2.PNG]
[Pitfall.2.MP3]

Beware of this PITFAL for this problem:

Many computer indices start with the first index at "0". 

The first index for this problem starts at "1".

...
...
...

* CONCEPT REVIEW *

[ConceptReview.PNG]
[ConceptReview.MP3]

...
...
...

[ConceptReview.1.PNG]
[ConceptReview.1.MP3] CREATE

CONCEPT REVIEW : Singly Linked List

The singly linked list is a linear data structure in which 

each element of the list contains a pointer which points to the next element in the list. 

Each element in the singly linked list is called a node. 

Each node has two components: 

a data component 

and a pointer component which points to the next node in the list.

The first node of the list is called the head, 

and the last node of the list is called the tail. 

The last node of the list contains a pointer to null. 

Each node in the list can be accessed linearly 

by traversing through the list from head to tail.

...
...
...

* CONCEPTUAL OVERVIEW *

[ConceptualOverview.PNG]
[ConceptualOverview.MP3]

...
...
...

[ConceptualOverview.01.PNG]
[ConceptualOverview.01.MP3]

OK, let's take a look at the conceptual overview.

Here we see in "Example 1:" we are given a singly linked list

represented in this image as a series of circles representing the nodes of our list.

The arrows represent pointers to the next node in the list.

Now, this large white arrow in the middle represents the processing of your code.

And then the second row of circles represents the output of your code.

The nodes with odd indices in the given list are shaded with a light grey background.

And the nodes with even indices in the given list are shaded with a dark grey background.

We can also see the values of each node represented as integers.

Also shown is a textual representaion of the singly linked list.

With the input list, and the output list, which mirrors the values in the illustration.

The first index has a value of 1.

The second index with a value of 2.

And the third index with a value of 3.

And so on.

For this example, it is just a coincidence that the values of each node match the index for each node.

Now, the solution must return the nodes with odd indices together,

followed by the nodes with even indices together.

And in the second row of circles, we see the re-ordered list which should be singly linked list result returned by your code.

[ConceptualOverview.02.PNG]

With the first node value coming from the first odd index of the given list with a value of 1.

[ConceptualOverview.03.PNG]

Then the second node value comes from the second odd index of the given list with a value of 3.

[ConceptualOverview.04.PNG]

Then the third node value comes from the third and last odd index of the given list with a value of 5.

And that concludes the grouping of ODD indices from the given list.

[ConceptualOverview.05.PNG]

The next node then starts with EVEN indices from the given list.

So the fourth node value comes from the FIRST EVEN index of the given list with a value of 2.

[ConceptualOverview.06.PNG]

And the fifth node value comes from the second and last even index of the given list with a value of 4.

And that concludes Example 1.

...
...
...

[Pitfall.PNG]
[Pitfall.MP3]

...
...
...

[Pitfall.1.PNG]
[Pitfall.1.MP3] CREATE

Beware of this PITFALL:

This problem is not grouping odd and even node values.

This problem is grouping odd and even node indices. 

...
...
...

[ConceptualOverview.07.PNG]
[ConceptualOverview.07.MP3]

Let's look at Example Two.

Here, again we see a graphical representaion of our singly linked lists.

And a textual representation.

The graphical representation has ODD node indices shaded in light grey.

And EVEN node indices shaded in dark grey.

In this, example two, we see that we are given a singly linked list 

with the values

2, 1, 3, 5, 6, 4, 7.

This time the node values do not match with the node indeces,

so we must really pay attention to the odd and even indices.

So, how would this translate into the resulting singly linked list?

First we would group the values in the odd indices,

namely index 1, index 3, index 5, and so on...

Resulting in a singly linked list with values

[ConceptualOverview.08.PNG]

2, 

[ConceptualOverview.09.PNG]

3, 

[ConceptualOverview.10.PNG]

6 

[ConceptualOverview.11.PNG]

and 7.

and that would conclude the grouping of the odd indices from the given list.

Finally, we group the values of the even indices,

namely, index 2, index 4, index 6, and so on...

Resulting in part two of this singly linked list with values of

[ConceptualOverview.12.PNG]

1, 

[ConceptualOverview.13.PNG]

5, 

[ConceptualOverview.14.PNG]

and 4.

(Pause to allow viewing of the last attractive and easy to follow animation which assist users in visualizing complex algorithms.)

...
...
...

* CONSTRAINTS *

[Constraints.PNG]
[Constraints.MP3]

...
...
...

[Constraints.1.PNG]
[Constraints.1.MP3] RECORD

The constraints for this problem are :

The number of nodes in the linked list is in the range of [0, to 10 to the 4th], also known as ten thousand.

and the Node.val, or "node value", could be a value falling between negative 10 to the 6th, also known as negative one million,

and ten to the 6th, also known as positive one million.

...
...
...

* SOLUTION WALKTHROUGH *

[SolutionWalkthrough.PNG]
[SolutionWalkthrough.MP3]

[SolutionWalkthrough.1.PNG]

Solution Intuition: Put the odd nodes in a linked list and the even nodes in another.

Then link the evenList to the tail of the oddList.

[SolutionWalkthrough.2.PNG]

Solution Algorithm : 

The solution is very intuitive.

But it is not trivial to write a concise and bug-free code.

A well-formed LinkedList needs two pointers: head and tail to support operations at both ends. (Typo fix.)

The variables head and odd are the head pointer and tail pointer of one LinkedList we call oddList; 

the variables evenHead and even are the head pointer and tail pointer of another LinkedList we call evenList. 

The algorithm traverses the original LinkedList and puts the odd nodes into the oddList and the even nodes into the evenList. (Typo fix.)

To traverse a LinkedList we need at least one pointer as an iterator for the current node. 

But here the pointers odd and even not only serve as the tail pointers but also act as the iterators of the original list.

The best way of solving any linked list problem is to visualize it either in your mind or on a piece of paper. 

An illustration of our algorithm is following:

...
...
...

* CODE WALKTHROUGH *

[CodeWalkthrough.PNG]
[CodeWalkthrough.MP3]

[CodeWalkthrough.0.PNG]
[CodeWalkthrough.0.MP3]

...
...
...

OK, let's look at the code walthrough,

The code in this video will be Java code.

Here we will see a side-by-side view of the solution code and a singly linked list structure diagram.

[CodeWalkthrough.1.PNG]

On line 1 of our solution code, we declare a public class named Solution and begin our code block with an open curly brace.

[CodeWalkthrough.2.PNG]

On line 2 we declare a public fuction oddEvenList of data type ListNode, that accepts an argument head of data type ListNode.

Then we open the code block for this function with an open curly brace.

[CodeWalkthrough.3.PNG]

In line 3 we do some housekeeping.

If the input parameter head is equal to null, then return null.

None of the examples passed in an empty list, but it could be possible, so we want to be able to handle that case if it arises.

Note that all the Java statements in our code are terminated by semicolons.

[CodeWalkthrough.4.PNG]
 
Now, let's look at Step 0 of our diagram.

In line 4, we see a number of things happening.

First we initialize a ListNode odd and point it at the ListNode head with the assignment operator.

Then we initialize a ListNode even and point it to the node that is the "next" node after head, accessed by "head dot next".

Finally we initialize a ListNode evenHead and assign it to point to the ListNode even.

Remember, you can pause or rewind this video at any time if you would like to take a closer look at what is going on.

[CodeWalkthrough.5.PNG]

We are going to move on to Step 1 in our diagram.

And now let's look at line 5 in our code.

Note that all the node data types in this code are called ListNode, but I'm going to just start calling them nodes.

Line 5 sets up a while loop that will traverse the given singly linked list.

While the node even is not euqal to null, and while the node at even.next is not equal to null, run the code block of the while loop.

Then we have an open curly brace to open the code block for this while loop.

If we take a look at the diagram, we see that the node even is closer to the tail of the list than the node odd is.

In fact, the node even will always be closer to the end of tail of the list than the node odd will be, as we traverse the list.

So, all we need to do is check when the node even has reached the end of the list to know when to terminate the while loop.

Note that the node head is not manipulated as part of the while loop and will always point to the head of the odd-indexed-nodes.

In fact, we don't even have a node named "oddHead" as we do with "evenHead" because the node "head" will serve that role.

[CodeWalkthrough.6.PNG]

On line 6 we point the node at odd.next to the node at even.next which effectively skips over the nodes with even indices.

[CodeWalkthrough.7.PNG]

On line 7 we point the node odd to odd.next which traverses the odd node through the list.

[CodeWalkthrough.8.PNG]

On line 8 we point the node at even.next to the node at odd.next which effectively skips over the nodes with odd indices.

[CodeWalkthrough.9.PNG]

On line 9 we point the node even to even.next which traverses the even node through the list.

[CodeWalkthrough.10.PNG]

On line 10 we close the code block for the while loop with a close curly brace.

Now, let's take a look at what we have created with our while loop by looking at the figure.

We can see in the figure that we now have two separate singly linked lists.

First is a singly linked list of odd indices with the node "head" pointing at the head and the node "odd" pointing at the tail.

Second is a singly linked list of even indices with the node "evenHead" pointing at the head.

And the node "even" is pointing at null which is a condition to exit the while loop.

Also note that in this figure it is a coincidence that the node values and index values were the same.

The node values can be any value, and we are only looking at the "odd-ness" or the "even-ness" of the indices as mentioned in the pitfall.

[CodeWalkthrough.11.PNG]

In line 11 we can see the final step in our figure.

The node at odd.next, which was at the tail of the odd-index-list is assigned to point to evenHead which is at the head of the even-index-list.

Thus, completing our reordering, and creating the final singly linked list.

[CodeWalkthrough.12.PNG]

Line 12 returns the node head which points to our resulting list.

[CodeWalkthrough.13.PNG]

Line 13 closes the code block for oddEvenList with a close curly brace.

[CodeWalkthrough.14.PNG]

And line 14 closes the code block for Solution with a close curly brace.

...
...
...

* Complexity Analysis *

[ComplexityAnalysis.PNG]
[ComplexityAnalysis.MP3]

[ComplexityAnalysis.1.PNG]
[ComplexityAnalysis.1.MP3]

Looking at the Complexity Analysis for this problem, we see...

A Time complexity of order of N.

There are a total of n nodes and we visit each node once.

And a space complexity of order of 1.

All we need is the four pointers.

...
...
...

[Title.PNG]
[Title.2.MP3]

And there you have it.

That was the problem and solution for the "Odd Even Linked List" problem.

Thank you for being a part of LeetCode.

...
...
...

[VideoBumper.1.3.MP4]

...

ODD EVEN LINKED LIST - PROBLEM AND SOLUTION SCRIPT

For Video : https://www.youtube.com/watch?v=9Sz73igoitg

...

GRAVEYARD

 1 public class Solution {
 2     public ListNode oddEvenList(ListNode head) {
 3         if (head == null) return null;
 4         ListNode odd = head, even = head.next, evenHead = even;
 5         while (even != null && even.next != null) {
 6             odd.next = even.next;
 7             odd = odd.next;
 8             even.next = odd.next;
 9             even = even.next;
10         }
11         odd.next = evenHead;
12         return head;
13     }
14 }

/** 
 * Definition for singly linked list.
 * public class Listnode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */

...

// Problem : Odd Even Linked List
// Stragety : Build a singly linked list of odd indices. 
// Then build a singly linked list of even indices. 
// Finally, connect the two sub-lists after they are built 
// and reutn a pointer to the head of the odd list which comes first.
public class Solution {
    public ListNode oddEvenList(ListNode head) {
        if (head == null) return null; // If the parameter list is empty, just return an empty list.
        // "head" remains the pointer to the beginning of the return list throughout the build process.
        // The node "odd" will point to the last element of the odd-list after the odd-list is built.
        ListNode odd = head; 
        // The node "even" will point to the tail of the even-list after the even-list is built.
        ListNode even = head.next; 
        // The node "evenHead" is the pointer to the beginning of the even list after even-list is built.
        ListNode evenHead = even; 
        // "even" nexts through the list until it gets to the end and meets null.
        // "even.next" will equal null, when it is pointing to the tail, the last element in the list.
        while (even != null && even.next != null {
            // Build the odd-list first from every other list node.
            odd.next = even.next;
            // Traverse through the odd list
            odd = odd.next; 
            // Build the even-list second from every other list node.
            even.next = odd.next;
            // Traverse though the even list
            even = even.next;
        }
        // Connect the two sublists into one final list.
        odd.next = evenHead;
	// Return the final reordered list.
        return head;
    }
}


...


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
   public ListNode oddEvenList(ListNode head) {
   }

...
...
...

